const { BedrockRuntimeClient, InvokeModelCommand } = require("@aws-sdk/client-bedrock-runtime");
const Teacher = require("../models/webapp-models/teacherModel");

const bedrock = new BedrockRuntimeClient({
  region: process.env.AWS_MODEL_REGION || "us-east-1",
  credentials: {
    accessKeyId: process.env.AWS_ACCESS_MODEL_KEY_ID,
    secretAccessKey: process.env.AWS_SECRET_MODEL_ACCESS_KEY,
  },
});

const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

const teacherChat = async (req, res) => {
  try {
    const { userId, query } = req.body;

    if (!userId || !query) {
      return res.status(400).json({ error: "Missing userId or query" });
    }

    const teacher = await Teacher.findById(userId);
    if (!teacher) {
      return res.status(404).json({ error: "Teacher not found" });
    }

    const prompt = `
You are an AI assistant for the ASSESSA.AI Teacher Dashboard.

🎯 Your purpose is to GUIDE teachers on how to use the platform — not to perform tasks or create content.

---
📌 DASHBOARD OVERVIEW

1. **Upload Assessments**
   - Teachers can upload PDF files containing multiple-choice questions.
   - These assessments are parsed and stored in the system.
   - Uploaded assessments appear in the **Assessment Library**.

2. **Assessment Library**
   - Lists all uploaded assessments.
   - Teachers can download or delete assessments from here.

3. **Progress Tracking**
   - Displays all student submissions for assessments.
   - Shows: Student name, class, assessment title, score, percentage, duration, and submission date.
   - Teachers can generate AI-based feedback from here (using a button).

4. **Feedback Hub**
   - Shows all feedbacks previously generated by the teacher.
   - Allows reviewing past feedback per student and assessment.

5. **Teacher Profile**
   - Includes name, email, role, class, and subjects taught.
   - Profile info can be edited.

---
🚫 WHAT YOU **CANNOT** DO
- Do NOT generate feedback.
- Do NOT create or fabricate assessments, questions, or student data.
- Do NOT invent dashboard sections that don’t exist.
- Do NOT summarize student scores or suggest grades.

✅ WHAT YOU **CAN** DO
- Explain where teachers can upload assessments.
- Show how to access student performance.
- Guide users to use buttons like “Generate Feedback” or “Delete Assessment”.
- Refer to tab names like **Progress Tracking**, **Feedback Hub**, etc.

---
Now, a teacher is asking:

"${query}"

➡️ Your response should:
- Be brief (2–4 sentences)
- Refer to real dashboard sections
- Clearly guide the teacher on where to go
- Never perform the task yourself
    `.trim();

    const requestBody = {
      anthropic_version: "bedrock-2023-05-31",
      messages: [{ role: "user", content: prompt }],
      max_tokens: 800,
      temperature: 0.5,
    };

    const command = new InvokeModelCommand({
      modelId: "anthropic.claude-3-5-sonnet-20240620-v1:0",
      contentType: "application/json",
      accept: "application/json",
      body: JSON.stringify(requestBody),
    });

    const MAX_RETRIES = 5;
    let attempts = 0;
    let reply = null;

    while (attempts < MAX_RETRIES) {
      try {
        const response = await bedrock.send(command);
        const raw = await response.body.transformToString();
        const parsed = JSON.parse(raw);
        reply = parsed.content?.[0]?.text || "⚠ Claude returned no output.";
        break;
      } catch (err) {
        if (err.name === "ThrottlingException" || err.$metadata?.httpStatusCode === 429) {
          const delay = Math.floor(1000 * (attempts + 1) + Math.random() * 500); // Exponential jitter
          console.warn(`⏳ Throttled (attempt ${attempts + 1}) — retrying in ${delay}ms`);
          await sleep(delay);
          attempts++;
        } else {
          console.error("❌ Claude invocation failed:", err);
          return res.status(500).json({ error: "Bot failed to respond" });
        }
      }
    }

    if (!reply) {
      return res.status(429).json({
        error: "Too many requests. Please wait a few seconds and try again.",
      });
    }

    return res.status(200).json({ reply });

  } catch (error) {
    console.error("❌ Teacher bot error (outer):", error);
    return res.status(500).json({ error: "Bot failed due to unexpected error" });
  }
};

module.exports = { teacherChat };
